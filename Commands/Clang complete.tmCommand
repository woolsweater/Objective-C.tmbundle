<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env python3

import re
import os
import plistlib
import subprocess
import sys
from glob import glob
from collections import defaultdict

class TMDocument:
    """
    Represents a TextMate document for purposes of clang code completion.
    """
    def __init__(self, environ):
        # Supress KeyErrors for nonexistent keys in favor of returning None
        if not environ is optionaldict:
            environ = optionaldict(environ)
        self.environment = environ
        
    @property
    def path(self):
        """The value of `$TM_FILEPATH`; path to this file."""
        return self.environment["TM_FILEPATH"]

    @property
    def completion_location(self):
        """
        The position pair for the start of the current word, 'line:column'

        clang's completion requires the column to be at the beginning of the token.
        """
        line_number = self.environment["TM_LINE_NUMBER"]
        line = self.environment["TM_CURRENT_LINE"]
        word = self.environment["TM_CURRENT_WORD"]
        word_start_index = line.find(word)
        return "{}:{}".format(line_number, word_start_index)

    @property
    def sdk_path(self):
        """
        Path to the correct SDK for the project. This looks first for the
        environment variable `$OBJC_SDK_PATH` (presumably from a
        .tm_properties file). If that is found, its value is used. If not,
        then if `$OBJC_PLATFORM` is either `iphoneos` or `macosx`, its value
        is used to get the path from `xcrun`. Otherwise, the current OS X SDK
        is returned.
        """
        sdk_path = self.environment["OBJC_SDK_PATH"]
        if not sdk_path:
            platform = self.environment["OBJC_PLATFORM"] or "macosx"
            command = ["xcrun", "--show-sdk-path", "--sdk", platform]
            try:
                sdk_path = subprocess.check_output(command).decode('utf-8')
            except subprocess.CalledProcessError:
                return None
        return sdk_path.strip()
    
    @property
    def completion_arch(self):
        """
        The value that should be passed to clang's `-arch` option for code
        completion.
        
        The value is taken from the environment variable
        `$OBJC_COMPLETION_ARCH`, defaulting to `x86_64` if that is not found.
        """
        return self.environment["OBJC_COMPLETION_ARCH"] or "x86_64"

    @property
    def project_dir(self):
        """
        Path to the source root of the current project: either the value of
        `$OBJC_SOURCE_ROOT` (preferred, from a .tm_properties file) or
        `$TM_PROJECT_DIRECTORY`.
        """
        return (self.environment["OBJC_PROJECT_PATH"] or
                self.environment["TM_PROJECT_DIRECTORY"])
                
    @property
    def current_word(self):
        return self.environment["TM_CURRENT_WORD"]
        
    @property
    def indent_string(self):
        """
        The string for a new level of indent in this document. This consists of
        spaces if TM_SOFT_TABS is YES, otherwise tab characters.
        """
        if not bool(self.environment["TM_SOFT_TABS"]):
            return '\t'
        tab_size = int(self.environment["TM_TAB_SIZE"])
        return ' ' * tab_size
        
class optionaldict(defaultdict):
    """
    A defaultdict that disregards KeyErrors and returns None for missing keys.
    """
    def __init__(self, *original, **kwargs):
        super().__init__(lambda: None, *original, **kwargs)

def complete(tm_dialog, document):

    choices = list(get_completion_list(document))

    if not choices:
        display_failure_message(tm_dialog)
        return

    choice_command = [
        tm_dialog, "popup",
        "--alreadyTyped", document.current_word or "",
    ]

    # Put the choices dicts into a plist dict under the key "suggestions"
    plist = plistlib.dumps({"suggestions" : choices})

    # Run the popup command, passing that plist
    try:
        subprocess.check_output(choice_command, input=plist)
        # subprocess.check_call(choice_command, stdin=read)
    except subprocess.CalledProcessError as error:
        sys.exit(error.returncode)

def get_completion_list(document):
    """
    Call out to clang to get the list of completions for the cursor position.

    Returns a list of dictionaries representing the completions, or None if
    the invocation of clang failed.
    """
    command = [
        # Language options
        "clang", "-xobjective-c", "-fblocks", "-fsyntax-only", "-fmodules",
        # System info
        "-isysroot", document.sdk_path, "-arch", document.completion_arch,
        # Document info
        f"-I{document.project_dir}",
        "-Xclang", "-code-completion-at", 
        "-Xclang", f"-:{format(document.completion_location)}",
        # Use stdin
        "-"
    ]
    
    # source_glob = f"{document.project_dir}/**/*."
    # # command += glob(source_glob + 'h', recursive=True)
    # not_this_document = lambda p: p != document.path
    # other_sources = filter(not_this_document,
    #                        glob(source_glob + 'm', recursive=True))
    # command += other_sources

    try:
        command_result = subprocess.check_output(command, stdin=sys.stdin)
    except subprocess.CalledProcessError as error:
        sys.exit(error.returncode)

    raw_completions = command_result.decode('utf-8')

    return parse_completions(document.current_word, raw_completions)

def parse_completions(filter_word, completions):
    """
    Transform each completion into the correct dictionary format for
    TextMate's `tm_dialog` tool, as documented in the `complete` function in
    ~/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/ui.rb

    { "display" : &lt;title shown in completions list&gt;,
      "insert"  : &lt;snippet represented by this selection&gt;
      "match"   : &lt;filter key (defaults to the value of "display")&gt; }

    note: The value of "match" is also inserted by the dialog tool when a
    selection is made, after the tool trims the current word from the start.
    """

    display_key = "display"
    insert_key = "insert"
    match_key = "match"

    def parse_line(line):
        
        # clang puts the literal string "Pattern" in place of the identifier
        # in certain cases. The reason is unclear.
        clang_pattern_literal = "Pattern"

        identifier_pattern = r"^COMPLETION: (\w(\w|:)+) :"
        identifier_match = re.match(identifier_pattern, line)
        if not identifier_match:
            return defaultdict(str)
            
        identifier = identifier_match.group(1)
        snippet = sub_clang_arg_placeholders(line[identifier_match.end():])
        # Split insertion text off from snippet
        insertion_head, dollar, snippet = snippet.partition('$')

        if identifier == clang_pattern_literal:
            identifier = insertion_head
        
        return {
            display_key : identifier,
            insert_key : dollar + snippet if snippet else "",
            match_key : insertion_head
        }
    
    include = lambda d: d[display_key].startswith(filter_word)
    return filter(include, (parse_line(line) for line in completions.split('\n')))

def sub_clang_arg_placeholders(insertion):
    """
    Swap out clang's argument placeholders, formatted as `&lt;#(TYPE)#&gt;`, for the
    TextMate snippet format: `${INDEX:DEFAULT}`, or just `$INDEX` if no argument
    name is present (as it is not for methods).
    """

    type_end_marker = "#]"
    arg_groupname = "argname"

    def replacement_counter():
        def replacer(match):
            replacer.count += 1
            argname = match.group(arg_groupname)
            placeholder_format = "${{{}:{}}}" if argname else "${}"
            return placeholder_format.format(replacer.count, argname)
        replacer.count = 0    # Attach counter directly to function instance
        return replacer
    
    if not type_end_marker in insertion:
        # Drop initial space
        return insertion[1:]
    
    # Drop (return) type
    insertion = insertion.split(type_end_marker)[1]
    # Split varargs into their own argument; Clang joins them to the previous
    # type, e.g. "stringWithFormat:&lt;#(nonnull NSString *), ...#&gt;"
    # Fortunately there will only ever be one instance of varargs per insertion.
    insertion = re.sub(r", ...", r"#&gt;, &lt;#(...)", insertion, count=1)

    pattern = r"&lt;#\((?P&lt;{}&gt;[^)]*)\)#&gt;".format(arg_groupname)

    return re.sub(pattern, replacement_counter(), insertion)

def display_failure_message(tm_dialog):
    tooltip_command = [tm_dialog, "tooltip", "--text", "No completions found."]
    subprocess.call(tooltip_command)

if __name__ == '__main__':
    environment = optionaldict(os.environ)
    
    tm_dialog = environment["DIALOG"]
    if not tm_dialog:
        sys.stderr.write("$DIALOG tool unavailable")
        sys.exit(-1)
    
    complete(tm_dialog, TMDocument(environment))
</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>~</string>
	<key>name</key>
	<string>Clang complete</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>snippet</string>
	<key>outputLocation</key>
	<string>atCaret</string>
	<key>scope</key>
	<string>source.objc</string>
	<key>uuid</key>
	<string>58B1A9D6-A429-4C5B-8C4B-80CAFD7A8188</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
